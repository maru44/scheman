package notion

import (
	"context"

	gn "github.com/dstotijn/go-notion"
	"github.com/maru44/scheman/definition"
)

type (
	columnProps struct {
		// title
		ColumnName gn.DatabasePageProperty `json:"Column Name"`
		// select
		DataType gn.DatabasePageProperty `json:"Data Type"`
		// rich_text
		Default gn.DatabasePageProperty `json:"Default,omitempty"`
		// checkbox
		PK gn.DatabasePageProperty `json:"PK"`
		// checkbox
		AutoGen gn.DatabasePageProperty `json:"Auto Generate"`
		// checkbox
		Unique gn.DatabasePageProperty `json:"Unique"`
		// checkbox
		Nullable gn.DatabasePageProperty `json:"Null"`
		// comment
		Comment gn.DatabasePageProperty `json:"Comment,omitempty"`
		// rich_text
		FreeText gn.DatabasePageProperty `json:"Free Entry,omitempty"`
	}
)

func (n *Notion) createDefRow(ctx context.Context, tableID string, column definition.Column) error {
	if _, err := n.cli.CreatePage(ctx, gn.CreatePageParams{
		ParentType:             gn.ParentTypeDatabase,
		ParentID:               tableID,
		DatabasePageProperties: n.notionDBPropsFromDriversTable(column),
	}); err != nil {
		return err
	}
	return nil
}

func (n *Notion) updateDefRow(ctx context.Context, column definition.Column) error {
	if _, err := n.cli.UpdatePage(ctx, column.RowID, gn.UpdatePageParams{
		DatabasePageProperties: n.notionDBPropsFromDriversTable(column),
	}); err != nil {
		return err
	}
	return nil
}

func (n *Notion) notionDBPropsFromDriversTable(col definition.Column) *gn.DatabasePageProperties {
	dbProps := &gn.DatabasePageProperties{
		"Column Name": gn.DatabasePageProperty{
			Title: []gn.RichText{
				{
					Text: &gn.Text{
						Content: col.Name,
					},
				},
			},
		},
	}

	if _, ok := n.IgnoreAttributes["Data Type"]; !ok {
		(*dbProps)["Data Type"] = gn.DatabasePageProperty{
			Select: &gn.SelectOptions{
				Name: col.DBType,
			},
		}
	}
	if _, ok := n.IgnoreAttributes["PK"]; !ok {
		(*dbProps)["PK"] = gn.DatabasePageProperty{
			Checkbox: gn.BoolPtr(col.PK),
		}
	}
	if _, ok := n.IgnoreAttributes["Auto Generate"]; !ok {
		(*dbProps)["Auto Generate"] = gn.DatabasePageProperty{
			Checkbox: gn.BoolPtr(col.AutoGenerated),
		}
	}
	if _, ok := n.IgnoreAttributes["Unique"]; !ok {
		(*dbProps)["Unique"] = gn.DatabasePageProperty{
			Checkbox: gn.BoolPtr(col.Unique),
		}
	}
	if _, ok := n.IgnoreAttributes["Null"]; !ok {
		(*dbProps)["Null"] = gn.DatabasePageProperty{
			Checkbox: gn.BoolPtr(col.Nullable),
		}
	}

	if _, ok := n.IgnoreAttributes["Default"]; !ok && col.Default != "" {
		(*dbProps)["Default"] = gn.DatabasePageProperty{
			RichText: []gn.RichText{
				{
					Text: &gn.Text{
						Content: col.Default,
					},
				},
			},
		}
	}
	if _, ok := n.IgnoreAttributes["Comment"]; !ok && col.Comment != "" {
		(*dbProps)["Comment"] = gn.DatabasePageProperty{
			RichText: []gn.RichText{
				{
					Text: &gn.Text{
						Content: col.Comment,
					},
				},
			},
		}
	}
	if _, ok := n.IgnoreAttributes["Free Entry"]; !ok && col.FreeText != "" {
		(*dbProps)["Free Entry"] = gn.DatabasePageProperty{
			RichText: []gn.RichText{
				{
					Text: &gn.Text{
						Content: col.FreeText,
					},
				},
			},
		}
	}

	return dbProps
}
