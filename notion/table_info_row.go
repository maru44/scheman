package notion

import (
	"context"

	gn "github.com/dstotijn/go-notion"
	"github.com/maru44/scheman/definition"
)

type (
	columnProps struct {
		// title
		ColumnName gn.DatabasePageProperty `json:"Column Name"`
		// select
		DataType gn.DatabasePageProperty `json:"Data Type"`
		// rich_text
		Default gn.DatabasePageProperty `json:"Default"`
		// checkbox
		PK gn.DatabasePageProperty `json:"PK"`
		// checkbox
		AutoGen gn.DatabasePageProperty `json:"Auto Generate"`
		// checkbox
		Unique gn.DatabasePageProperty `json:"Unique"`
		// checkbox
		Nullable gn.DatabasePageProperty `json:"Null"`
		// comment
		Comment gn.DatabasePageProperty `json:"Comment"`
		// rich_text
		FreeText gn.DatabasePageProperty `json:"Free Entry"`
	}
)

func (n *Notion) createDefRow(ctx context.Context, tableID string, column definition.Column) error {
	props := notionPropsFromDriversTable(column)
	if _, err := n.cli.CreatePage(ctx, gn.CreatePageParams{
		ParentType:             gn.ParentTypeDatabase,
		ParentID:               tableID,
		DatabasePageProperties: props.ToMap(),
	}); err != nil {
		return err
	}
	return nil
}

func (n *Notion) updateDefRow(ctx context.Context, column definition.Column) error {
	props := notionPropsFromDriversTable(column)
	if _, err := n.cli.UpdatePage(ctx, column.RowID, gn.UpdatePageParams{
		DatabasePageProperties: props.ToMap(),
	}); err != nil {
		return err
	}
	return nil
}

func notionPropsFromDriversTable(col definition.Column) *columnProps {
	props := &columnProps{
		ColumnName: gn.DatabasePageProperty{
			Title: []gn.RichText{
				{
					Text: &gn.Text{
						Content: col.Name,
					},
				},
			},
		},
		DataType: gn.DatabasePageProperty{
			Select: &gn.SelectOptions{
				Name: col.DBType,
			},
		},
		Default: gn.DatabasePageProperty{
			RichText: []gn.RichText{
				{
					Text: &gn.Text{
						Content: col.Default,
					},
				},
			},
		},
		PK: gn.DatabasePageProperty{
			Checkbox: gn.BoolPtr(col.PK),
		},
		AutoGen: gn.DatabasePageProperty{
			Checkbox: gn.BoolPtr(col.AutoGenerated),
		},
		Unique: gn.DatabasePageProperty{
			Checkbox: gn.BoolPtr(col.Unique),
		},
		Nullable: gn.DatabasePageProperty{
			Checkbox: gn.BoolPtr(col.Nullable),
		},
		Comment: gn.DatabasePageProperty{
			RichText: []gn.RichText{
				{
					Text: &gn.Text{
						Content: col.Comment,
					},
				},
			},
		},
		FreeText: gn.DatabasePageProperty{
			RichText: []gn.RichText{
				{
					Text: &gn.Text{
						Content: col.FreeText,
					},
				},
			},
		},
	}
	return props
}

func (c *columnProps) ToMap() *gn.DatabasePageProperties {
	return &gn.DatabasePageProperties{
		"Column Name":   c.ColumnName,
		"Data Type":     c.DataType,
		"Default":       c.Default,
		"PK":            c.PK,
		"Unique":        c.Unique,
		"Null":          c.Nullable,
		"Auto Generate": c.AutoGen,
		"Comment":       c.Comment,
		"Free Entry":    c.FreeText,
	}
}
